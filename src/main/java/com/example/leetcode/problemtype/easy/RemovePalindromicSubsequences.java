package com.example.leetcode.problemtype.easy;

/**
 * You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.
 * <p>
 * Return the minimum number of steps to make the given string empty.
 * <p>
 * A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.
 * <p>
 * A string is called palindrome if is one that reads the same backward as well as forward.
 * <p>
 * <p>
 * <p>
 * Example 1:
 * <p>
 * Input: s = "ababa"
 * Output: 1
 * Explanation: s is already a palindrome, so its entirety can be removed in a single step.
 * <p>
 * Example 2:
 * <p>
 * Input: s = "abb"
 * Output: 2
 * Explanation: "abb" -> "bb" -> "".
 * Remove palindromic subsequence "a" then "bb".
 * <p>
 * Example 3:
 * <p>
 * Input: s = "baabb"
 * Output: 2
 * Explanation: "baabb" -> "b" -> "".
 * Remove palindromic subsequence "baab" then "b".
 * <p>
 * <p>
 * <p>
 * Constraints:
 * <p>
 * 1 <= s.length <= 1000
 * s[i] is either 'a' or 'b'.
 * <p>
 * leetcode link : https://leetcode.com/problems/remove-palindromic-subsequences/description/
 */
public class RemovePalindromicSubsequences {

    /**
     * https://leetcode.com/problems/remove-palindromic-subsequences/solutions/2124240/one-major-observation-java-explanation/
     * What makes a subsequence a palindrome?
     * Well of course it's when the string is the same forwards and backwards. Is "a" a palindrome? Yes. Is "aa" a palindrome? Yes. What about "aaaaaaaaa"? Yes!
     * <p>
     * The main observation here is that any string consisting of the same letters is a palindrome.
     * Since we're working with subsequences and the only characters in the string are 'a' and 'b',
     * we know we can get rid of all palindromes in at most 2 steps.
     */

    public int removePalindromeSub(String s) {
        if (isPalindrome(s)) return 1;
        return 2;
    }

    private boolean isPalindrome(String s) {
        int i = 0, n = s.length();
        while (i <= n / 2)
            if (s.charAt(i) != s.charAt(n - 1 - i++)) return false;
        return true;
    }

    public int removePalindromeSubWithReverseUtility(String s) {
        if (s.equals(new StringBuilder(s).reverse().toString())) return 1;
        return 2;
    }
}
