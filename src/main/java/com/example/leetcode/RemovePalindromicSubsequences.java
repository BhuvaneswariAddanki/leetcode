package com.example.leetcode;

/**
 * You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.
 * <p>
 * Return the minimum number of steps to make the given string empty.
 * <p>
 * A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.
 * <p>
 * A string is called palindrome if is one that reads the same backward as well as forward.
 * <p>
 * Example 1:
 * <p>
 * Input: s = "ababa"
 * Output: 1
 * Explanation: s is already a palindrome, so its entirety can be removed in a single step.
 * <p>
 * Example 2:
 * <p>
 * Input: s = "abb"
 * Output: 2
 * Explanation: "abb" -> "bb" -> "".
 * Remove palindromic subsequence "a" then "bb".
 * <p>
 * Example 3:
 * <p>
 * Input: s = "baabb"
 * Output: 2
 * Explanation: "baabb" -> "b" -> "".
 */
public class RemovePalindromicSubsequences {

    public int removePalindromeSub(String s) {

    /*  StringBuilder sb = new StringBuilder();
        sb.append(s);
        return s.equals(sb.reverse().toString()) ? 1 : 2;*/
        return isPalindrome(s) ? 1 : 2;


    }

    public boolean isPalindrome(String s) {

        int n = s.length() - 1;
        for (int i = 0; i <= n / 2; i++) {
            if (s.charAt(i) != s.charAt(n - i)) {
                return false;
            }
        }
        return true;
    }
}
